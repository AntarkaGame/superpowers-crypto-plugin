(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var fix, fs;



fix = "interface ArrayBufferView {}\ndeclare var ArrayBufferView: {};\n\ninterface ArrayBuffer {}\ndeclare var ArrayBuffer: {};\n\ninterface Int8Array {}\ndeclare var Int8Array: {};\n\ninterface Int32Array {}\ndeclare var Int32Array: {};\n\ninterface Float32Array {}\ndeclare var Float32Array: {};";

SupAPI.registerPlugin('typescript', 'CryptoJS ', {
  code: "declare var CryptoJS;",
  defs: "// Type definitions for crypto-js v3.1.3\r\n// Project: https://github.com/evanvosberg/crypto-js\r\n// Definitions by: Michael Zabka <https://github.com/misak113/>\r\n// Definitions: https://github.com/borisyankov/DefinitelyTyped\r\n\r\ndeclare var CryptoJS: CryptoJS.CryptoJSStatic;\r\n\r\ndeclare module CryptoJS{\r\n    module lib{\r\n        interface Base{\r\n            extend(overrides: Object): Object\r\n            init(...args: any[]): void\r\n            //arguments of create() is same as init(). This is true for all subclasses\r\n            create(...args: any[]): Base\r\n            mixIn(properties: Object): void\r\n            clone(): Base\r\n        }\r\n\r\n        interface WordArray extends Base{\r\n            words: number[]\r\n            sigBytes: number\r\n            init(words?: number[], sigBytes?: number): void\r\n            create(words?: number[], sigBytes?: number): WordArray\r\n\r\n            init(typedArray: ArrayBuffer): void\r\n            init(typedArray: Int8Array): void\r\n\r\n            //Because TypeScript uses a structural type system then we don't need (& can't)\r\n            //declare oveload function init, create for the following type (same as Int8Array):\r\n            //then Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array\r\n            //Note also: Uint8ClampedArray is not defined in lib.d.ts & not supported in IE\r\n            //@see http://compatibility.shwups-cms.ch/en/home?&property=Uint8ClampedArray\r\n\r\n            create(typedArray: ArrayBuffer): WordArray\r\n            create(typedArray: Int8Array): WordArray\r\n\r\n            toString(encoder?: enc.IEncoder): string\r\n            concat(wordArray: WordArray): WordArray\r\n            clamp(): void\r\n            clone(): WordArray\r\n            random(nBytes: number): WordArray\r\n        }\r\n\r\n        interface BufferedBlockAlgorithm extends Base{\r\n            reset(): void\r\n            clone(): BufferedBlockAlgorithm\r\n        }\r\n\r\n        //tparam C - Configuration type\r\n        interface IHasher<C> extends BufferedBlockAlgorithm{\r\n            cfg: C\r\n            init(cfg?: C): void\r\n            create(cfg?: C): IHasher<C>\r\n\r\n            update(messageUpdate: WordArray): Hasher\r\n            update(messageUpdate: string): Hasher\r\n\r\n            finalize(messageUpdate?: WordArray): WordArray\r\n            finalize(messageUpdate?: string): WordArray\r\n\r\n            blockSize: number\r\n\r\n            _createHelper(hasher: Hasher): IHasherHelper<C>\r\n            _createHmacHelper(hasher: Hasher): IHasherHmacHelper\r\n\r\n            clone(): IHasher<C>\r\n        }\r\n        interface Hasher extends IHasher<Object>{}\r\n\r\n        //tparam C - Configuration type\r\n        interface IHasherHelper<C>{\r\n            (message: WordArray, cfg?: C): WordArray\r\n            (message: string, cfg?: C): WordArray\r\n        }\r\n        interface HasherHelper extends IHasherHelper<Object>{}\r\n\r\n        interface IHasherHmacHelper{\r\n            (message: WordArray,  key: WordArray): WordArray\r\n            (message: string,     key: WordArray): WordArray\r\n            (message: WordArray,  key: string): WordArray\r\n            (message: string,     key: string): WordArray\r\n        }\r\n\r\n        //tparam C - Configuration type\r\n        interface ICipher<C> extends BufferedBlockAlgorithm{\r\n            cfg: C\r\n            createEncryptor(key: WordArray, cfg?: C): ICipher<C>\r\n            createDecryptor(key: WordArray, cfg?: C): ICipher<C>\r\n\r\n            create(xformMode?: number, key?: WordArray, cfg?: C): ICipher<C>\r\n            init(xformMode?: number, key?: WordArray, cfg?: C): void\r\n\r\n            process(dataUpdate: WordArray): WordArray\r\n            process(dataUpdate: string): WordArray\r\n\r\n            finalize(dataUpdate?: WordArray): WordArray\r\n            finalize(dataUpdate?: string): WordArray\r\n\r\n            keySize: number\r\n            ivSize: number\r\n\r\n            _createHelper(cipher: Cipher): ICipherHelper<C>\r\n\r\n            clone(): ICipher<C>\r\n        }\r\n        interface Cipher extends ICipher<Object>{}\r\n\r\n        interface IStreamCipher<C> extends ICipher<C>{\r\n            drop?: number;\r\n\r\n            createEncryptor(key: WordArray, cfg?: C): IStreamCipher<C>\r\n            createDecryptor(key: WordArray, cfg?: C): IStreamCipher<C>\r\n\r\n            create(xformMode?: number, key?: WordArray, cfg?: C): IStreamCipher<C>\r\n\r\n            blockSize: number\r\n        }\r\n        interface StreamCipher extends IStreamCipher<Object>{}\r\n\r\n        interface BlockCipherMode extends Base{\r\n            createEncryptor(cipher: Cipher, iv: number[]): mode.IBlockCipherEncryptor\r\n            createDecryptor(cipher: Cipher, iv: number[]): mode.IBlockCipherDecryptor\r\n            init(cipher?: Cipher, iv?: number[]): void\r\n            create(cipher?: Cipher, iv?: number[]): BlockCipherMode\r\n        }\r\n\r\n        //BlockCipher has interface same as IStreamCipher\r\n        interface BlockCipher extends IStreamCipher<IBlockCipherCfg>{}\r\n\r\n        interface IBlockCipherCfg{\r\n            mode?: mode.IBlockCipherModeImpl //default CBC\r\n            padding?: pad.IPaddingImpl //default Pkcs7\r\n        }\r\n\r\n        interface CipherParamsData{\r\n            ciphertext?: lib.WordArray\r\n            key?: lib.WordArray\r\n            iv?: lib.WordArray\r\n            salt?: lib.WordArray\r\n            algorithm?: Cipher\r\n            mode?: mode.IBlockCipherModeImpl\r\n            padding?: pad.IPaddingImpl\r\n            blockSize?: number\r\n            formatter?: format.IFormatter\r\n        }\r\n\r\n        interface CipherParams extends Base, CipherParamsData{\r\n            init(cipherParams?: CipherParamsData): void\r\n            create(cipherParams?: CipherParamsData): CipherParams\r\n            toString(formatter?: format.IFormatter): string\r\n        }\r\n\r\n        //tparam C - Configuration type\r\n        interface ISerializableCipher<C extends ISerializableCipherCfg> extends Base{\r\n            cfg: C\r\n            encrypt(cipher: Cipher, message: WordArray, key: WordArray, cfg?: C): CipherParams\r\n            encrypt(cipher: Cipher, message: string,    key: WordArray, cfg?: C): CipherParams\r\n\r\n            decrypt(cipher: Cipher, ciphertext: CipherParamsData, key: WordArray, cfg?: C): WordArray\r\n            decrypt(cipher: Cipher, ciphertext: string,       key: WordArray, cfg?: C): WordArray\r\n        }\r\n\r\n        interface SerializableCipher extends ISerializableCipher<ISerializableCipherCfg>{}\r\n        interface ISerializableCipherCfg{\r\n            format?: format.IFormatter //default OpenSSLFormatter\r\n        }\r\n\r\n        interface IPasswordBasedCipher<C extends IPasswordBasedCipherCfg> extends Base{\r\n            cfg: C\r\n            encrypt(cipher: Cipher, message: WordArray, password: string, cfg?: C): CipherParams\r\n            encrypt(cipher: Cipher, message: string,    password: string, cfg?: C): CipherParams\r\n\r\n            decrypt(cipher: Cipher, ciphertext: CipherParamsData, password: string, cfg?: C): WordArray\r\n            decrypt(cipher: Cipher, ciphertext: string,       password: string, cfg?: C): WordArray\r\n        }\r\n\r\n        interface PasswordBasedCipher extends IPasswordBasedCipher<IPasswordBasedCipherCfg>{}\r\n        interface IPasswordBasedCipherCfg extends ISerializableCipherCfg{\r\n            kdf?: kdf.IKdfImpl //default OpenSSLKdf\r\n        }\r\n\r\n        /** see Cipher._createHelper */\r\n        interface ICipherHelper<C>{\r\n            encrypt(message: WordArray, key: WordArray, cfg?: C): CipherParams\r\n            encrypt(message: string,    key: WordArray, cfg?: C): CipherParams\r\n            encrypt(message: WordArray, password: string, cfg?: C): CipherParams\r\n            encrypt(message: string,    password: string, cfg?: C): CipherParams\r\n\r\n            decrypt(ciphertext: CipherParamsData, key: WordArray, cfg?: C): WordArray\r\n            decrypt(ciphertext: string,       key: WordArray, cfg?: C): WordArray\r\n            decrypt(ciphertext: CipherParamsData, password: string, cfg?: C): WordArray\r\n            decrypt(ciphertext: string,       password: string, cfg?: C): WordArray\r\n        }\r\n\r\n        interface CipherHelper extends ICipherHelper<Object>{}\r\n        interface LibStatic{\r\n            Base: lib.Base\r\n            WordArray: lib.WordArray\r\n            CipherParams: lib.CipherParams\r\n            SerializableCipher: lib.SerializableCipher\r\n            PasswordBasedCipher: lib.PasswordBasedCipher\r\n        }\r\n    }\r\n\r\n    module enc{\r\n        interface IEncoder{\r\n            stringify(wordArray: lib.WordArray): string\r\n        }\r\n        interface IDecoder{\r\n            parse(s: string): lib.WordArray\r\n        }\r\n        interface ICoder extends IEncoder, IDecoder {}\r\n\r\n        interface EncStatic{\r\n            Hex: ICoder\r\n            Latin1: ICoder\r\n            Utf8: ICoder\r\n            Base64: ICoder\r\n            Utf16: ICoder\r\n            Utf16BE: ICoder\r\n            Utf16LE: ICoder\r\n        }\r\n    }\r\n\r\n    module kdf{\r\n        interface KdfStatic{\r\n            OpenSSL: IKdfImpl\r\n        }\r\n\r\n        interface IKdfImpl{\r\n            execute(password: string, keySize: number, ivSize: number, salt?: lib.WordArray): lib.CipherParams\r\n            execute(password: string, keySize: number, ivSize: number, salt?: string): lib.CipherParams\r\n        }\r\n    }\r\n\r\n    module format{\r\n        interface FormatStatic{\r\n            OpenSSL: IFormatter\r\n            Hex: IFormatter\r\n        }\r\n\r\n        interface IFormatter{\r\n            stringify(cipherParams: lib.CipherParamsData): string\r\n            parse(s: string): lib.CipherParams\r\n        }\r\n    }\r\n\r\n    module algo{\r\n        interface AlgoStatic{\r\n            AES: algo.AES\r\n            DES: algo.DES\r\n            TripleDES: algo.TripleDES\r\n\r\n            RabbitLegacy: algo.RabbitLegacy\r\n            Rabbit: algo.Rabbit\r\n            RC4: algo.RC4\r\n\r\n            MD5: algo.MD5\r\n            RIPEMD160: algo.RIPEMD160\r\n            SHA1: algo.SHA1\r\n            SHA256: algo.SHA256\r\n            SHA224: algo.SHA224\r\n            SHA384: algo.SHA384\r\n            SHA512: algo.SHA512\r\n\r\n            SHA3: algo.SHA3\r\n\r\n            HMAC: algo.HMAC\r\n\r\n            EvpKDF: algo.EvpKDF\r\n            PBKDF2: algo.PBKDF2\r\n\r\n            RC4Drop: algo.RC4Drop\r\n        }\r\n\r\n        interface IBlockCipherImpl extends lib.BlockCipher{\r\n            encryptBlock(M: number[], offset: number): void\r\n            decryptBlock(M: number[], offset: number): void\r\n\r\n            createEncryptor(key: lib.WordArray, cfg?: lib.IBlockCipherCfg): IBlockCipherImpl\r\n            createDecryptor(key: lib.WordArray, cfg?: lib.IBlockCipherCfg): IBlockCipherImpl\r\n\r\n            create(xformMode?: number, key?: lib.WordArray, cfg?: lib.IBlockCipherCfg): IBlockCipherImpl\r\n        }\r\n\r\n        interface AES extends IBlockCipherImpl{}\r\n        interface DES extends IBlockCipherImpl{}\r\n        interface TripleDES extends IBlockCipherImpl{}\r\n\r\n        interface RabbitLegacy extends lib.StreamCipher{}\r\n        interface Rabbit extends lib.StreamCipher{}\r\n        interface RC4 extends lib.StreamCipher{}\r\n\r\n        interface MD5 extends lib.Hasher{}\r\n        interface RIPEMD160 extends lib.Hasher{}\r\n        interface SHA1 extends lib.Hasher{}\r\n        interface SHA256 extends lib.Hasher{}\r\n        interface SHA224 extends lib.Hasher{}\r\n        interface SHA384 extends lib.Hasher{}\r\n        interface SHA512 extends lib.Hasher{}\r\n\r\n        interface SHA3 extends lib.IHasher<ISHA3Cfg>{}\r\n        interface ISHA3Cfg{\r\n            outputLength?: number //default 512\r\n        }\r\n\r\n        interface HMAC extends lib.Base{\r\n            init(hasher?: lib.Hasher, key?: lib.WordArray): void\r\n            init(hasher?: lib.Hasher, key?: string): void\r\n            create(hasher?: lib.Hasher, key?: lib.WordArray): HMAC\r\n            create(hasher?: lib.Hasher, key?: string): HMAC\r\n\r\n            update(messageUpdate: lib.WordArray): HMAC\r\n            update(messageUpdate: string): HMAC\r\n\r\n            finalize(messageUpdate?: lib.WordArray): lib.WordArray\r\n            finalize(messageUpdate?: string): lib.WordArray\r\n        }\r\n\r\n        interface EvpKDF extends lib.Base{\r\n            cfg: IEvpKDFCfg\r\n            init(cfg?: IEvpKDFCfg): void\r\n            create(cfg?: IEvpKDFCfg): EvpKDF\r\n            compute(password: lib.WordArray,  salt: lib.WordArray): lib.WordArray\r\n            compute(password: string,         salt: lib.WordArray): lib.WordArray\r\n            compute(password: lib.WordArray,  salt: string): lib.WordArray\r\n            compute(password: string,         salt: string): lib.WordArray\r\n        }\r\n        interface IEvpKDFCfg{\r\n            keySize?: number //default 128/32\r\n            hasher?: lib.Hasher //default MD5, or SHA1 with PBKDF2\r\n            iterations?: number //default 1\r\n        }\r\n        interface IEvpKDFHelper{\r\n            (password: lib.WordArray,  salt: lib.WordArray, cfg?: IEvpKDFCfg): lib.WordArray\r\n            (password: string,         salt: lib.WordArray, cfg?: IEvpKDFCfg): lib.WordArray\r\n            (password: lib.WordArray,  salt: string,        cfg?: IEvpKDFCfg): lib.WordArray\r\n            (password: string,         salt: string,        cfg?: IEvpKDFCfg): lib.WordArray\r\n        }\r\n\r\n        interface PBKDF2 extends EvpKDF{} //PBKDF2 is same as EvpKDF\r\n\r\n        interface RC4Drop extends RC4 { }\r\n    }\r\n\r\n    module mode{\r\n        interface ModeStatic{\r\n            CBC: mode.CBC\r\n            CFB: mode.CFB\r\n            CTR: mode.CTR\r\n            CTRGladman: mode.CTRGladman\r\n            ECB: mode.ECB\r\n            OFB: mode.OFB\r\n        }\r\n\r\n        interface IBlockCipherEncryptor extends lib.BlockCipherMode{\r\n            processBlock(words: number[], offset: number): void\r\n        }\r\n        interface IBlockCipherDecryptor extends lib.BlockCipherMode{ //exactly as IBlockCipherEncryptor\r\n            processBlock(words: number[], offset: number): void\r\n        }\r\n        interface IBlockCipherModeImpl extends lib.BlockCipherMode{\r\n            Encryptor: IBlockCipherEncryptor\r\n            Decryptor: IBlockCipherDecryptor\r\n        }\r\n\r\n        interface CBC extends IBlockCipherModeImpl{}\r\n        interface CFB extends IBlockCipherModeImpl{}\r\n        interface CTR extends IBlockCipherModeImpl{}\r\n        interface CTRGladman extends IBlockCipherModeImpl{}\r\n        interface ECB extends IBlockCipherModeImpl{}\r\n        interface OFB extends IBlockCipherModeImpl{}\r\n    }\r\n\r\n    module pad{\r\n        interface PadStatic{\r\n            Pkcs7: pad.Pkcs7\r\n            AnsiX923: pad.AnsiX923\r\n            Iso10126: pad.Iso10126\r\n            Iso97971: pad.Iso97971\r\n            ZeroPadding: pad.ZeroPadding\r\n            NoPadding: pad.NoPadding\r\n        }\r\n\r\n        interface IPaddingImpl{\r\n            pad(data: lib.WordArray, blockSize: number): void\r\n            unpad(data: lib.WordArray): void\r\n        }\r\n\r\n        interface Pkcs7 extends IPaddingImpl{}\r\n        interface AnsiX923 extends IPaddingImpl{}\r\n        interface Iso10126 extends IPaddingImpl{}\r\n        interface Iso97971 extends IPaddingImpl{}\r\n        interface ZeroPadding extends IPaddingImpl{}\r\n        interface NoPadding extends IPaddingImpl{}\r\n    }\r\n\r\n    module x64{\r\n        interface X64Static{\r\n            Word: x64.Word\r\n            WordArray: x64.WordArray\r\n        }\r\n\r\n        interface Word extends lib.Base{\r\n            high: number\r\n            low: number\r\n\r\n            init(high?: number, low?: number): void\r\n            create(high?: number, low?: number): Word\r\n        }\r\n\r\n        interface WordArray extends lib.Base{\r\n            words: Word[]\r\n            sigBytes: number\r\n\r\n            init(words?: Word[], sigBytes?: number): void\r\n            create(words?: Word[], sigBytes?: number): WordArray\r\n            toX32(): lib.WordArray\r\n            clone(): WordArray\r\n        }\r\n    }\r\n\r\n    interface CryptoJSStatic{\r\n        lib: lib.LibStatic\r\n        enc: enc.EncStatic\r\n        kdf: kdf.KdfStatic\r\n        format: format.FormatStatic\r\n        algo: algo.AlgoStatic\r\n        mode: mode.ModeStatic\r\n        pad: pad.PadStatic\r\n        x64: x64.X64Static\r\n\r\n        AES: CryptoJS.lib.ICipherHelper<CryptoJS.lib.IBlockCipherCfg>\r\n        DES: CryptoJS.lib.ICipherHelper<CryptoJS.lib.IBlockCipherCfg>\r\n        TripleDES: CryptoJS.lib.ICipherHelper<CryptoJS.lib.IBlockCipherCfg>\r\n\r\n        RabbitLegacy: CryptoJS.lib.CipherHelper\r\n        Rabbit: CryptoJS.lib.CipherHelper\r\n        RC4: CryptoJS.lib.CipherHelper\r\n        RC4Drop: CryptoJS.lib.ICipherHelper<Object>\r\n\r\n        MD5: CryptoJS.lib.HasherHelper\r\n        HmacMD5: CryptoJS.lib.IHasherHmacHelper\r\n        RIPEMD160: CryptoJS.lib.HasherHelper\r\n        HmacRIPEMD160: CryptoJS.lib.IHasherHmacHelper\r\n        SHA1: CryptoJS.lib.HasherHelper\r\n        HmacSHA1: CryptoJS.lib.IHasherHmacHelper\r\n        SHA256: CryptoJS.lib.HasherHelper\r\n        HmacSHA256: CryptoJS.lib.IHasherHmacHelper\r\n        SHA224: CryptoJS.lib.HasherHelper\r\n        HmacSHA224: CryptoJS.lib.IHasherHmacHelper\r\n        SHA512: CryptoJS.lib.HasherHelper\r\n        HmacSHA512: CryptoJS.lib.IHasherHmacHelper\r\n        SHA384: CryptoJS.lib.HasherHelper\r\n        HmacSHA384: CryptoJS.lib.IHasherHmacHelper\r\n\r\n        SHA3: CryptoJS.lib.IHasherHelper<CryptoJS.algo.ISHA3Cfg>\r\n        HmacSHA3: CryptoJS.lib.IHasherHmacHelper\r\n\r\n        EvpKDF: CryptoJS.algo.IEvpKDFHelper\r\n        PBKDF2: CryptoJS.algo.IEvpKDFHelper //PBKDF2 is same as EvpKDF\r\n    }\r\n}" + fix
});
},{}]},{},[1]);
